from os import getpid
import pkg_resources
import platform
import socket

from sanic import Sanic
from sanic.response import json, text


def create_inspector(app):
    inspector = Sanic(configure_logging=False)
    inspector.config['KEEP_ALIVE'] = False
    inspector.app = app
    inspector.add_route(render_status, '/')
    inspector.add_route(get_status, '/api/status')
    inspector.add_route(get_details, '/api/details')
    inspector.add_route(get_python_details, '/api/python-details')
    inspector.add_route(get_python_distributions, '/api/python-distributions')
    app.inspector = inspector
    if app.config.inspector:
        app.add_listener('start', run_inspector)
    return inspector


async def run_inspector(app):
    if app.config.inspector_socket:
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.bind(app.config.inspector_socket)
    else:
        sock = None
    await app.inspector.create_server(
        host=app.config.inspector_host,
        port=app.config.inspector_port,
        sock=sock,
        access_log=False,
        debug=False
    )


async def render_status(request):
    app = request.app.app

    app_name = app.config.app_name
    app_version = app.config.app_version

    app_id = f'{app_name} ({app_version})' if app_version else app_name

    is_healthy = app.is_healthy()
    if is_healthy:
        status = app.config.inspector_status_healthy
    else:
        status = app.config.inspector_status_unhealthy
    return text(f'{app_id} is {status}')


async def get_status(request):
    app = request.app.app
    is_healthy = app.is_healthy()
    is_db_connected = await app.is_db_connected()
    return json({
        'name': app.config.app_name,
        'version': app.config.app_version,
        'healthy': is_healthy,
        'db_connected': is_db_connected
    })


async def get_details(request):
    app = request.app.app
    details = await app.inspect()
    return json(details)


def get_python_details(request):
    details = {
        'version': platform.python_version(),
        'implementation': platform.python_implementation(),
        'build': platform.python_build(),
        'branch': platform.python_branch(),
        'compiler': platform.python_compiler(),
        'revision': platform.python_revision()
    }
    return json(details)


def get_python_distributions(request):
    dists = [
        {'name': dist.key, 'verison': dist.version}
        for dist
        in pkg_resources.working_set
    ]
    return json(dists)


class Inspectable:

    def is_healthy(self):
        return NotImplementedError

    def inspect(self):
        return {}